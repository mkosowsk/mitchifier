{"version":3,"sources":["mitch_kosowski.png","components/InputTweet.js","components/OutputTweet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputTweet","props","handleChange","bind","e","this","onChange","target","value","originalTweet","Grid","padded","Row","centered","Column","width","Form","TextArea","placeholder","Component","OutputTweet","copyToClipboard","copy","mitchifiedTweet","setState","copySuccess","state","Button","color","content","onClick","Header","as","emojis","getRandomEmoji","Math","floor","random","length","App","text","textArray","split","returnArray","i","randomNumber","push","toUpperCase","lastCharacter","includes","join","mitchifyText","className","textAlign","icon","Image","src","logo","alt","size","href","rel","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,4C,gTCgC5BC,E,YA5BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFL,E,0EAKNC,GACTC,KAAKJ,MAAMK,SAASF,EAAEG,OAAOC,S,+BAI7B,IAAMC,EAAgBJ,KAAKJ,MAAMQ,cAEjC,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACD,EAAA,EAAKE,IAAN,CAAUC,UAAQ,GACd,kBAACH,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAChB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,YAAY,6BAA6BV,MAAOC,EAAeH,SAAUD,KAAKH,wB,GAnB/FiB,a,kBCsCVC,E,YApCX,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KAKVoB,gBAAkB,SAACjB,GACfkB,IAAK,EAAKrB,MAAMsB,iBAChB,EAAKC,SAAS,CAAEC,YAAa,aAL7B,EAAKC,MAAQ,CAAED,YAAa,IAHb,E,sEAYf,IAAMF,EAAkBlB,KAAKJ,MAAMsB,gBAEnC,OACI,6BACI,kBAACb,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACD,EAAA,EAAKE,IAAN,CAAUC,UAAQ,GACd,kBAACH,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAChB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,YAAY,gCAAgCV,MAAOe,QAK7E,kBAACI,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,oBACRC,QAASzB,KAAKgB,kBAElB,kBAACU,EAAA,EAAD,CAAQC,GAAG,KAAKJ,MAAM,SAASvB,KAAKqB,MAAMD,kB,GA/BhCN,aCKpBc,EAAS,CACb,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,SAAK,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,SAAK,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,SAAK,eAAM,eAAM,SAAK,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,SAAK,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,SAAK,SAAK,SAAK,eAAM,eAAM,eAAM,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,eAAM,SAAK,SAAK,eAAM,eAAM,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,OAAK,OAAK,SAAK,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,eAAM,eAAM,SAAK,SAAK,eAAM,eAAM,SAAK,eAAM,eAAM,eAAM,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,eAAM,SAAK,SAAK,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBAG3rJ,SAASC,IACP,OAAOD,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,S,IA4FnCC,E,YA9Db,WAAYtC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAK2B,QAAU,EAAKA,QAAQ3B,KAAb,gBAEf,EAAKuB,MAAQ,CACXjB,cAAe,GACfc,gBAAiB,IARF,E,0EAYNd,GACXJ,KAAKmB,SAAS,CAAEf,oB,gCAIhB,IAAMc,EA3CV,SAAsBiB,GAIpB,IAHA,IAAMC,EAAYD,EAAKE,MAAM,KACvBC,EAAc,GAEXC,EAAI,EAAGA,EAAIH,EAAUH,OAAQM,IAAK,CACzC,IAAMC,EAAeV,KAAKE,SAEtBQ,EAAe,GACjBF,EAAYG,KAAKL,EAAUG,GAAGG,eACrBF,EAAe,GACxBF,EAAYG,KAAK,IAAML,EAAUG,IACxBC,EAAe,GACxBF,EAAYG,KAAKL,EAAUG,GAAK,IAAMV,IAAmB,MAEzDS,EAAYG,KAAKL,EAAUG,IAK/B,IAAMI,EAAgBL,EAAYA,EAAYL,OAAS,GAGvD,OAFKL,EAAOgB,SAASD,IAAgBL,EAAYG,KAAKZ,KAE/CS,EAAYO,KAAK,KAqBEC,CAAa9C,KAAKqB,MAAMjB,eAChDJ,KAAKmB,SAAS,CAAED,sB,+BAIhB,IAAMd,EAAgBJ,KAAKqB,MAAMjB,cAC3Bc,EAAkBlB,KAAKqB,MAAMH,gBAEnC,OACE,yBAAK6B,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAACrB,EAAA,EAAD,CAAQC,GAAG,KAAKJ,MAAM,QAAQyB,UAAU,UAAxC,2BAEF,kBAAC,EAAD,CACE5C,cAAeA,EACfH,SAAUD,KAAKH,eAEjB,kBAACyB,EAAA,EAAD,CACEC,MAAM,QACNC,QAAQ,iBACRyB,KAAK,QACLxB,QAASzB,KAAKyB,UAEhB,kBAAC,EAAD,CACEP,gBAAiBA,IAEnB,yBAAK6B,UAAU,gBACb,kBAACG,EAAA,EAAD,CAAOC,IAAKC,IAAML,UAAU,WAAWM,IAAI,OAAOC,KAAK,QAAQ9C,UAAQ,KAEzE,uBACEuC,UAAU,WACVQ,KAAK,qCACLrD,OAAO,SACPsD,IAAI,uBAJN,4CAOA,0BAAMC,KAAK,MAAMC,aAAW,iBAA5B,iBACE,0BAAMD,KAAK,MAAMC,aAAW,gCAA5B,gBACA,0BAAMD,KAAK,MAAMC,aAAW,aAA5B,sB,GAxDQ5C,aC/BE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9688795f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mitch_kosowski.8ce9a7e6.png\";","import React, { Component } from 'react';\nimport { Form, Grid, TextArea } from 'semantic-ui-react';\n\nclass InputTweet extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onChange(e.target.value);\n    }\n\n    render() {\n        const originalTweet = this.props.originalTweet;\n\n        return (\n            <div>\n                <Grid padded>\n                    <Grid.Row centered>\n                        <Grid.Column width={8}>\n                            <Form>\n                                <TextArea placeholder='Paste your dumb tweet here' value={originalTweet} onChange={this.handleChange} />\n                            </Form>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default InputTweet;","import React, { Component } from 'react';\nimport { Button, Form, Grid, Header, TextArea } from 'semantic-ui-react';\nimport copy from 'copy-to-clipboard';\n\nclass OutputTweet extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { copySuccess: '' }\n    }\n\n    copyToClipboard = (e) => {\n        copy(this.props.mitchifiedTweet)\n        this.setState({ copySuccess: 'Copied!' });\n    };\n\n    render() {\n        const mitchifiedTweet = this.props.mitchifiedTweet;\n\n        return (\n            <div>\n                <Grid padded>\n                    <Grid.Row centered>\n                        <Grid.Column width={8}>\n                            <Form>\n                                <TextArea placeholder='Mitchified tweet will go here' value={mitchifiedTweet} />\n                            </Form>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                <Button\n                    color='green'\n                    content='Copy to Clipboard'\n                    onClick={this.copyToClipboard}>\n                </Button>\n                <Header as='h3' color='green'>{this.state.copySuccess}</Header>\n            </div>\n        )\n    }\n}\n\nexport default OutputTweet;","import React, { Component } from 'react';\nimport logo from './mitch_kosowski.png';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Button, Header, Image } from 'semantic-ui-react';\nimport InputTweet from './components/InputTweet';\nimport OutputTweet from './components/OutputTweet';\n\n\nconst emojis = [\n  '😄', '😃', '😀', '😊', '☺', '😉', '😍', '😘', '😚', '😗', '😙', '😜', '😝', '😛', '😳', '😁', '😔', '😌', '😒', '😞', '😣', '😢', '😂', '😭', '😪', '😥', '😰', '😅', '😓', '😩', '😫', '😨', '😱', '😠', '😡', '😤', '😖', '😆', '😋', '😷', '😎', '😴', '😵', '😲', '😟', '😦', '😧', '😈', '👿', '😮', '😬', '😐', '😕', '😯', '😶', '😇', '😏', '😑', '👲', '👳', '👮', '👷', '💂', '👶', '👦', '👧', '👨', '👩', '👴', '👵', '👱', '👼', '👸', '😺', '😸', '😻', '😽', '😼', '🙀', '😿', '😹', '😾', '👹', '👺', '🙈', '🙉', '🙊', '💀', '👽', '💩', '🔥', '✨', '🌟', '💫', '💥', '💢', '💦', '💧', '💤', '💨', '👂', '👀', '👃', '👅', '👄', '👍', '👎', '👌', '👊', '✊', '✌', '👋', '✋', '👐', '👆', '👇', '👉', '👈', '🙌', '🙏', '☝', '👏', '💪', '🚶', '🏃', '💃', '👫', '👪', '👬', '👭', '💏', '💑', '👯', '🙆', '🙅', '💁', '🙋', '💆', '💇', '💅', '👰', '🙎', '🙍', '🙇', '🎩', '👑', '👒', '👟', '👞', '👡', '👠', '👢', '👕', '👔', '👚', '👗', '🎽', '👖', '👘', '👙', '💼', '👜', '👝', '👛', '👓', '🎀', '🌂', '💄', '💛', '💙', '💜', '💚', '❤', '💔', '💗', '💓', '💕', '💖', '💞', '💘', '💌', '💋', '💍', '💎', '👤', '👥', '💬', '👣', '💭', '🐶', '🐺', '🐱', '🐭', '🐹', '🐰', '🐸', '🐯', '🐨', '🐻', '🐷', '🐽', '🐮', '🐗', '🐵', '🐒', '🐴', '🐑', '🐘', '🐼', '🐧', '🐦', '🐤', '🐥', '🐣', '🐔', '🐍', '🐢', '🐛', '🐝', '🐜', '🐞', '🐌', '🐙', '🐚', '🐠', '🐟', '🐬', '🐳', '🐋', '🐄', '🐏', '🐀', '🐃', '🐅', '🐇', '🐉', '🐎', '🐐', '🐓', '🐕', '🐖', '🐁', '🐂', '🐲', '🐡', '🐊', '🐫', '🐪', '🐆', '🐈', '🐩', '🐾', '💐', '🌸', '🌷', '🍀', '🌹', '🌻', '🌺', '🍁', '🍃', '🍂', '🌿', '🌾', '🍄', '🌵', '🌴', '🌲', '🌳', '🌰', '🌱', '🌼', '🌐', '🌞', '🌝', '🌚', '🌑', '🌒', '🌓', '🌔', '🌕', '🌖', '🌗', '🌘', '🌜', '🌛', '🌙', '🌍', '🌎', '🌏', '🌋', '🌌', '🌠', '⭐', '☀', '⛅', '☁', '⚡', '☔', '❄', '⛄', '🌀', '🌁', '🌈', '🌊', '🎍', '💝', '🎎', '🎒', '🎓', '🎏', '🎆', '🎇', '🎐', '🎑', '🎃', '👻', '🎅', '🎄', '🎁', '🎋', '🎉', '🎊', '🎈', '🎌', '🔮', '🎥', '📷', '📹', '📼', '💿', '📀', '💽', '💾', '💻', '📱', '☎', '📞', '📟', '📠', '📡', '📺', '📻', '🔊', '🔉', '🔈', '🔇', '🔔', '🔕', '📢', '📣', '⏳', '⌛', '⏰', '⌚', '🔓', '🔒', '🔏', '🔐', '🔑', '🔎', '💡', '🔦', '🔆', '🔅', '🔌', '🔋', '🔍', '🛁', '🛀', '🚿', '🚽', '🔧', '🔩', '🔨', '🚪', '🚬', '💣', '🔫', '🔪', '💊', '💉', '💰', '💴', '💵', '💷', '💶', '💳', '💸', '📲', '📧', '📥', '📤', '✉', '📩', '📨', '📯', '📫', '📪', '📬', '📭', '📮', '📦', '📝', '📄', '📃', '📑', '📊', '📈', '📉', '📜', '📋', '📅', '📆', '📇', '📁', '📂', '✂', '📌', '📎', '✒', '✏', '📏', '📐', '📕', '📗', '📘', '📙', '📓', '📔', '📒', '📚', '📖', '🔖', '📛', '🔬', '🔭', '📰', '🎨', '🎬', '🎤', '🎧', '🎼', '🎵', '🎶', '🎹', '🎻', '🎺', '🎷', '🎸', '👾', '🎮', '🃏', '🎴', '🀄', '🎲', '🎯', '🏈', '🏀', '⚽', '⚾', '🎾', '🎱', '🏉', '🎳', '⛳', '🚵', '🚴', '🏁', '🏇', '🏆', '🎿', '🏂', '🏊', '🏄', '🎣', '☕', '🍵', '🍶', '🍼', '🍺', '🍻', '🍸', '🍹', '🍷', '🍴', '🍕', '🍔', '🍟', '🍗', '🍖', '🍝', '🍛', '🍤', '🍱', '🍣', '🍥', '🍙', '🍘', '🍚', '🍜', '🍲', '🍢', '🍡', '🍳', '🍞', '🍩', '🍮', '🍦', '🍨', '🍧', '🎂', '🍰', '🍪', '🍫', '🍬', '🍭', '🍯', '🍎', '🍏', '🍊', '🍋', '🍒', '🍇', '🍉', '🍓', '🍑', '🍈', '🍌', '🍐', '🍍', '🍠', '🍆', '🍅', '🌽', '🏠', '🏡', '🏫', '🏢', '🏣', '🏥', '🏦', '🏪', '🏩', '🏨', '💒', '⛪', '🏬', '🏤', '🌇', '🌆', '🏯', '🏰', '⛺', '🏭', '🗼', '🗾', '🗻', '🌄', '🌅', '🌃', '🗽', '🌉', '🎠', '🎡', '⛲', '🎢', '🚢', '⛵', '🚤', '🚣', '⚓', '🚀', '✈', '💺', '🚁', '🚂', '🚊', '🚉', '🚞', '🚆', '🚄', '🚅', '🚈', '🚇', '🚝', '🚋', '🚃', '🚎', '🚌', '🚍', '🚙', '🚘', '🚗', '🚕', '🚖', '🚛', '🚚', '🚨', '🚓', '🚔', '🚒', '🚑', '🚐', '🚲', '🚡', '🚟', '🚠', '🚜', '💈', '🚏', '🎫', '🚦', '🚥', '⚠', '🚧', '🔰', '⛽', '🏮', '🎰', '♨', '🗿', '🎪', '🎭', '📍', '🚩', '⬆', '⬇', '⬅', '➡', '🔠', '🔡', '🔤', '↗', '↖', '↘', '↙', '↔', '↕', '🔄', '◀', '▶', '🔼', '🔽', '↩', '↪', 'ℹ', '⏪', '⏩', '⏫', '⏬', '⤵', '⤴', '🆗', '🔀', '🔁', '🔂', '🆕', '🆙', '🆒', '🆓', '🆖', '📶', '🎦', '🈁', '🈯', '🈳', '🈵', '🈴', '🈲', '🉐', '🈹', '🈺', '🈶', '🈚', '🚻', '🚹', '🚺', '🚼', '🚾', '🚰', '🚮', '🅿', '♿', '🚭', '🈷', '🈸', '🈂', 'Ⓜ', '🛂', '🛄', '🛅', '🛃', '🉑', '㊙', '㊗', '🆑', '🆘', '🆔', '🚫', '🔞', '📵', '🚯', '🚱', '🚳', '🚷', '🚸', '⛔', '✳', '❇', '❎', '✅', '✴', '💟', '🆚', '📳', '📴', '🅰', '🅱', '🆎', '🅾', '💠', '➿', '♻', '♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐', '♑', '♒', '♓', '⛎', '🔯', '🏧', '💹', '💲', '💱', '©', '®', '™', '〽', '〰', '🔝', '🔚', '🔙', '🔛', '🔜', '❌', '⭕', '❗', '❓', '❕', '❔', '🔃', '🕛', '🕧', '🕐', '🕜', '🕑', '🕝', '🕒', '🕞', '🕓', '🕟', '🕔', '🕠', '🕕', '🕖', '🕗', '🕘', '🕙', '🕚', '🕡', '🕢', '🕣', '🕤', '🕥', '🕦', '✖', '➕', '➖', '➗', '♠', '♥', '♣', '♦', '💮', '💯', '✔', '☑', '🔘', '🔗', '➰', '🔱', '🔲', '🔳', '◼', '◻', '◾', '◽', '▪', '▫', '🔺', '⬜', '⬛', '⚫', '⚪', '🔴', '🔵', '🔻', '🔶', '🔷', '🔸', '🔹'\n];\n\nfunction getRandomEmoji() {\n  return emojis[Math.floor(Math.random() * emojis.length)];\n}\n\n\nfunction mitchifyText(text) {\n  const textArray = text.split(\" \");\n  const returnArray = [];\n\n  for (let i = 0; i < textArray.length; i++) {\n    const randomNumber = Math.random();\n\n    if (randomNumber < 0.4) {\n      returnArray.push(textArray[i].toUpperCase());\n    } else if (randomNumber < 0.6) {\n      returnArray.push('#' + textArray[i]);\n    } else if (randomNumber < 0.8) {\n      returnArray.push(textArray[i] + ' ' + getRandomEmoji() + '\\n');\n    } else {\n      returnArray.push(textArray[i]);\n    }\n  }\n\n  // check if last character is an emoji and if not add an emoji\n  const lastCharacter = returnArray[returnArray.length - 1];\n  if (!emojis.includes(lastCharacter)) returnArray.push(getRandomEmoji());\n\n  return returnArray.join(\" \");\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n\n    this.state = {\n      originalTweet: '',\n      mitchifiedTweet: ''\n    }\n  }\n\n  handleChange(originalTweet) {\n    this.setState({ originalTweet });\n  }\n\n  onClick() {\n    const mitchifiedTweet = mitchifyText(this.state.originalTweet);\n    this.setState({ mitchifiedTweet });\n  }\n\n  render() {\n    const originalTweet = this.state.originalTweet;\n    const mitchifiedTweet = this.state.mitchifiedTweet;\n\n    return (\n      <div className=\"App\">\n        <div className=\"main-header-div\">\n          <Header as='h1' color='green' textAlign='center'>Tweet Mitchifier™</Header>\n        </div>\n        <InputTweet\n          originalTweet={originalTweet}\n          onChange={this.handleChange}\n        />\n        <Button\n          color='green'\n          content='Mitchify™'\n          icon='heart'\n          onClick={this.onClick}\n        />\n        <OutputTweet\n          mitchifiedTweet={mitchifiedTweet}\n        />\n        <div className=\"App-logo-div\">\n          <Image src={logo} className=\"App-logo\" alt=\"logo\" size='small' centered />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://twitter.com/Mitch_Kosowski\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          -@Mitch_Kosowski #GreatestTraderOfALLTIME\n        <span role=\"img\" aria-label=\"Flexed Biceps\"> 💪</span>\n          <span role=\"img\" aria-label=\"Smiling Face With Sunglasses\">😎</span>\n          <span role=\"img\" aria-label=\"Thumbs Up\">👍</span>\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}